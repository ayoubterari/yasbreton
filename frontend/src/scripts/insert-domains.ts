import { api } from '../lib/convex-client';

// Structure des domaines et sous-domaines bas√©e sur le VB-MAPP
const domainsData = [
  {
    name: "Comp√©tences de base de l'apprenant",
    description: "Comp√©tences fondamentales de communication et d'interaction",
    order: 1,
    subdomains: [
      "Coop√©ration et efficacit√© des agents renfor√ßateurs",
      "Performances visuelles",
      "Appairage r√©ceptif",
      "Imitation",
      "Langage vocale",
      "Demandes",
      "D√©nomination",
      "Intraverbal",
      "Vocalisations spontan√©es",
      "Syntaxe et grammaire",
      "Jeu et comportements de jeu",
      "Interactions sociales",
      "Instruction en groupe",
      "Suivre les routines de classe",
      "G√©n√©ralisation des r√©ponses"
    ]
  },
  {
    name: "Comp√©tences scolaires",
    description: "Comp√©tences acad√©miques et d'apprentissage",
    order: 2,
    subdomains: [
      "Habilet√©s de lecture",
      "Comp√©tences math√©matiques",
      "Comp√©tences d'√©criture",
      "√âpeler"
    ]
  },
  {
    name: "Autonomie",
    description: "Comp√©tences d'autonomie et de vie quotidienne",
    order: 3,
    subdomains: [
      "Habillage",
      "Alimentation",
      "Toilette",
      "Propret√©"
    ]
  },
  {
    name: "Motricit√©",
    description: "Comp√©tences motrices globales et fines",
    order: 4,
    subdomains: [
      "Motricit√© globale",
      "Motricit√© fine"
    ]
  }
];

export async function insertDomainsAndSubdomains() {
  console.log("üöÄ D√©but de l'insertion des domaines et sous-domaines...\n");

  const results = {
    domains: [] as any[],
    subdomains: [] as any[],
    errors: [] as string[]
  };

  try {
    for (const domainData of domainsData) {
      console.log(`üìÅ Cr√©ation du domaine: ${domainData.name}`);
      
      try {
        // Cr√©er le domaine
        const domainId = await api.domains.createDomain({
          name: domainData.name,
          description: domainData.description,
          order: domainData.order
        });
        
        const domain = { _id: domainId, ...domainData };

        results.domains.push(domain);
        console.log(`   ‚úÖ Domaine cr√©√© avec l'ID: ${domain._id}`);
        console.log(`   üìÇ Cr√©ation de ${domainData.subdomains.length} sous-domaines...\n`);

        // Cr√©er les sous-domaines
        for (let i = 0; i < domainData.subdomains.length; i++) {
          const subdomainName = domainData.subdomains[i];
          
          try {
            const subdomainId = await api.domains.createSubdomain({
              name: subdomainName,
              domainId: domain._id,
              order: i + 1
            });
            
            const subdomain = { _id: subdomainId, name: subdomainName, domainId: domain._id, order: i + 1 };

            results.subdomains.push(subdomain);
            console.log(`      ‚úì ${subdomainName}`);
          } catch (error: any) {
            const errorMsg = `Erreur lors de la cr√©ation du sous-domaine "${subdomainName}": ${error.message}`;
            console.error(`      ‚úó ${errorMsg}`);
            results.errors.push(errorMsg);
          }
        }

        console.log(`   ‚úÖ ${domainData.subdomains.length} sous-domaines cr√©√©s\n`);
        console.log("‚îÄ".repeat(80) + "\n");
      } catch (error: any) {
        const errorMsg = `Erreur lors de la cr√©ation du domaine "${domainData.name}": ${error.message}`;
        console.error(`   ‚úó ${errorMsg}\n`);
        results.errors.push(errorMsg);
      }
    }

    console.log("‚ú® Insertion termin√©e!\n");
    console.log("üìä R√©sum√©:");
    console.log(`   - ${results.domains.length} domaines cr√©√©s`);
    console.log(`   - ${results.subdomains.length} sous-domaines cr√©√©s`);
    
    if (results.errors.length > 0) {
      console.log(`   - ${results.errors.length} erreurs rencontr√©es`);
    }

    return results;

  } catch (error) {
    console.error("‚ùå Erreur g√©n√©rale lors de l'insertion:", error);
    throw error;
  }
}

// Fonction pour obtenir un r√©sum√© des donn√©es √† ins√©rer
export function getDomainsDataSummary() {
  return {
    totalDomains: domainsData.length,
    totalSubdomains: domainsData.reduce((acc, d) => acc + d.subdomains.length, 0),
    domains: domainsData.map(d => ({
      name: d.name,
      subdomainsCount: d.subdomains.length
    }))
  };
}
