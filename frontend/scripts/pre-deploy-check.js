#!/usr/bin/env node

/**
 * Script de v√©rification avant d√©ploiement
 * V√©rifie que tous les pr√©requis sont remplis
 */

import { readFileSync, existsSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const rootDir = join(__dirname, '..');

let hasErrors = false;

console.log('üîç V√©rification pr√©-d√©ploiement...\n');

// 1. V√©rifier que package.json existe
console.log('üì¶ V√©rification de package.json...');
const packageJsonPath = join(rootDir, 'package.json');
if (!existsSync(packageJsonPath)) {
  console.error('‚ùå package.json introuvable');
  hasErrors = true;
} else {
  console.log('‚úÖ package.json trouv√©');
  
  const packageJson = JSON.parse(readFileSync(packageJsonPath, 'utf-8'));
  
  // V√©rifier les scripts n√©cessaires
  if (!packageJson.scripts?.build) {
    console.error('‚ùå Script "build" manquant dans package.json');
    hasErrors = true;
  } else {
    console.log('‚úÖ Script "build" pr√©sent');
  }
}

// 2. V√©rifier que vercel.json existe
console.log('\n‚öôÔ∏è  V√©rification de vercel.json...');
const vercelJsonPath = join(rootDir, 'vercel.json');
if (!existsSync(vercelJsonPath)) {
  console.error('‚ùå vercel.json introuvable');
  hasErrors = true;
} else {
  console.log('‚úÖ vercel.json trouv√©');
}

// 3. V√©rifier que .env.example existe
console.log('\nüîê V√©rification de .env.example...');
const envExamplePath = join(rootDir, '.env.example');
if (!existsSync(envExamplePath)) {
  console.warn('‚ö†Ô∏è  .env.example introuvable (recommand√© pour la documentation)');
} else {
  console.log('‚úÖ .env.example trouv√©');
}

// 4. V√©rifier que .gitignore existe et contient les bonnes entr√©es
console.log('\nüö´ V√©rification de .gitignore...');
const gitignorePath = join(rootDir, '.gitignore');
if (!existsSync(gitignorePath)) {
  console.error('‚ùå .gitignore introuvable');
  hasErrors = true;
} else {
  const gitignore = readFileSync(gitignorePath, 'utf-8');
  const requiredEntries = ['node_modules', 'dist', '*.local'];
  const missingEntries = requiredEntries.filter(entry => !gitignore.includes(entry));
  
  if (missingEntries.length > 0) {
    console.warn(`‚ö†Ô∏è  Entr√©es manquantes dans .gitignore: ${missingEntries.join(', ')}`);
  } else {
    console.log('‚úÖ .gitignore correctement configur√©');
  }
}

// 5. V√©rifier que index.html existe
console.log('\nüìÑ V√©rification de index.html...');
const indexHtmlPath = join(rootDir, 'index.html');
if (!existsSync(indexHtmlPath)) {
  console.error('‚ùå index.html introuvable');
  hasErrors = true;
} else {
  console.log('‚úÖ index.html trouv√©');
}

// 6. V√©rifier que le dossier src existe
console.log('\nüìÅ V√©rification du dossier src...');
const srcPath = join(rootDir, 'src');
if (!existsSync(srcPath)) {
  console.error('‚ùå Dossier src introuvable');
  hasErrors = true;
} else {
  console.log('‚úÖ Dossier src trouv√©');
  
  // V√©rifier les fichiers principaux
  const mainFiles = ['main.tsx', 'App.tsx'];
  for (const file of mainFiles) {
    if (!existsSync(join(srcPath, file))) {
      console.error(`‚ùå ${file} introuvable dans src/`);
      hasErrors = true;
    } else {
      console.log(`‚úÖ ${file} trouv√©`);
    }
  }
}

// 7. V√©rifier que vite.config.ts existe
console.log('\n‚ö° V√©rification de vite.config.ts...');
const viteConfigPath = join(rootDir, 'vite.config.ts');
if (!existsSync(viteConfigPath)) {
  console.error('‚ùå vite.config.ts introuvable');
  hasErrors = true;
} else {
  console.log('‚úÖ vite.config.ts trouv√©');
}

// R√©sum√©
console.log('\n' + '='.repeat(50));
if (hasErrors) {
  console.error('\n‚ùå Des erreurs ont √©t√© d√©tect√©es. Veuillez les corriger avant de d√©ployer.\n');
  process.exit(1);
} else {
  console.log('\n‚úÖ Toutes les v√©rifications sont pass√©es !');
  console.log('üöÄ Vous pouvez d√©ployer en toute s√©curit√©.\n');
  console.log('Prochaines √©tapes :');
  console.log('  1. Testez le build : npm run build');
  console.log('  2. Testez le preview : npm run preview');
  console.log('  3. D√©ployez sur Vercel : vercel --prod\n');
  process.exit(0);
}
