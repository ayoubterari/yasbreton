import { ConvexHttpClient } from "convex/browser";

const CONVEX_URL = process.env.CONVEX_URL || "https://your-convex-url.convex.cloud";
const client = new ConvexHttpClient(CONVEX_URL);

// Structure des domaines et sous-domaines
const domainsData = [
  {
    name: "Comp√©tences de base de l'apprenant",
    description: "Comp√©tences fondamentales de communication et d'interaction",
    order: 1,
    subdomains: [
      { name: "Coop√©ration et efficacit√© des agents renfor√ßateurs", order: 1 },
      { name: "Performances visuelles", order: 2 },
      { name: "Appairage r√©ceptif", order: 3 },
      { name: "Imitation", order: 4 },
      { name: "Langage vocale", order: 5 },
      { name: "Demandes", order: 6 },
      { name: "D√©nomination", order: 7 },
      { name: "Intraverbal", order: 8 },
      { name: "Vocalisations spontan√©es", order: 9 },
      { name: "Syntaxe et grammaire", order: 10 },
      { name: "Jeu et comportements de jeu", order: 11 },
      { name: "Interactions sociales", order: 12 },
      { name: "Instruction en groupe", order: 13 },
      { name: "Suivre les routines de classe", order: 14 },
      { name: "G√©n√©ralisation des r√©ponses", order: 15 }
    ]
  },
  {
    name: "Comp√©tences scolaires",
    description: "Comp√©tences acad√©miques et d'apprentissage",
    order: 2,
    subdomains: [
      { name: "Habilet√©s de lecture", order: 1 },
      { name: "Comp√©tences math√©matiques", order: 2 },
      { name: "Comp√©tences d'√©criture", order: 3 },
      { name: "√âpeler", order: 4 }
    ]
  },
  {
    name: "Autonomie",
    description: "Comp√©tences d'autonomie et de vie quotidienne",
    order: 3,
    subdomains: [
      { name: "Habillage", order: 1 },
      { name: "Alimentation", order: 2 },
      { name: "Toilette", order: 3 },
      { name: "Propret√©", order: 4 }
    ]
  },
  {
    name: "Motricit√©",
    description: "Comp√©tences motrices globales et fines",
    order: 4,
    subdomains: [
      { name: "Motricit√© globale", order: 1 },
      { name: "Motricit√© fine", order: 2 }
    ]
  }
];

async function insertDomainsAndSubdomains() {
  console.log("üöÄ D√©but de l'insertion des domaines et sous-domaines...\n");

  try {
    for (const domainData of domainsData) {
      console.log(`üìÅ Cr√©ation du domaine: ${domainData.name}`);
      
      // Cr√©er le domaine
      const domain = await client.mutation("domains:create" as any, {
        name: domainData.name,
        description: domainData.description,
        order: domainData.order
      });

      console.log(`   ‚úÖ Domaine cr√©√© avec l'ID: ${domain._id}`);
      console.log(`   üìÇ Cr√©ation de ${domainData.subdomains.length} sous-domaines...\n`);

      // Cr√©er les sous-domaines
      for (const subdomainData of domainData.subdomains) {
        const subdomain = await client.mutation("domains:createSubdomain" as any, {
          name: subdomainData.name,
          domainId: domain._id,
          order: subdomainData.order
        });

        console.log(`      ‚úì ${subdomainData.name}`);
      }

      console.log(`   ‚úÖ ${domainData.subdomains.length} sous-domaines cr√©√©s\n`);
      console.log("‚îÄ".repeat(80) + "\n");
    }

    console.log("‚ú® Tous les domaines et sous-domaines ont √©t√© cr√©√©s avec succ√®s!");
    console.log("\nüìä R√©sum√©:");
    console.log(`   - ${domainsData.length} domaines cr√©√©s`);
    console.log(`   - ${domainsData.reduce((acc, d) => acc + d.subdomains.length, 0)} sous-domaines cr√©√©s`);

  } catch (error) {
    console.error("‚ùå Erreur lors de l'insertion:", error);
    throw error;
  }
}

// Ex√©cuter le script
insertDomainsAndSubdomains()
  .then(() => {
    console.log("\n‚úÖ Script termin√© avec succ√®s");
    process.exit(0);
  })
  .catch((error) => {
    console.error("\n‚ùå Le script a √©chou√©:", error);
    process.exit(1);
  });
